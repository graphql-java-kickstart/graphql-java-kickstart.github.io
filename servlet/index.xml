<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About GraphQL Java Servlet on GraphQL Java Kickstart</title><link>https://www.graphql-java-kickstart.com/servlet/</link><description>Recent content in About GraphQL Java Servlet on GraphQL Java Kickstart</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate><atom:link href="https://www.graphql-java-kickstart.com/servlet/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started</title><link>https://www.graphql-java-kickstart.com/servlet/getting-started/</link><pubDate>Wed, 07 Nov 2018 00:11:02 +0100</pubDate><guid>https://www.graphql-java-kickstart.com/servlet/getting-started/</guid><description>A working version of this example can be found at https://github.com/graphql-java-kickstart/samples/tree/master/servlet-hello-world.
Build with Gradle First you set up a basic build script. You can use any build system you like, but the code you need to work with Gradle and Maven is included here.
Create a Gradle build file Make sure mavenCentral is among your repositories. The example build script below uses org.gretty to provide a webserver to show a working example.</description></item><item><title>Dataloaders</title><link>https://www.graphql-java-kickstart.com/servlet/dataloaders/</link><pubDate>Wed, 07 Nov 2018 00:11:02 +0100</pubDate><guid>https://www.graphql-java-kickstart.com/servlet/dataloaders/</guid><description>It is possible to create context, and consequently dataloaders, in both a request scope and a per query scope by customizing GraphQLContextBuilder and selecting the appropriate ContextSetting with the provided GraphQLConfiguration. A new DataLoaderRegistry should be created in each call to the GraphQLContextBuilder, and the servlet will call the builder at the appropriate times. For example:
public class CustomGraphQLContextBuilder implements GraphQLServletContextBuilder { private final DataLoader userDataLoader; public CustomGraphQLContextBuilder(DataLoader userDataLoader) { this.</description></item><item><title>Servlet Listener</title><link>https://www.graphql-java-kickstart.com/servlet/servlet-listener/</link><pubDate>Fri, 15 May 2020 09:28:02 +0100</pubDate><guid>https://www.graphql-java-kickstart.com/servlet/servlet-listener/</guid><description>The GraphQL Servlet library allows you to add a Servlet Listener for listening to the GraphQL request. It provides hooks into the servlet request execution (success, error, and finally):
public class MyServlet extends GraphQLHttpServlet { @Override protected GraphQLConfiguration getConfiguration() { return GraphQLConfiguration.with(createSchema()) .with(queryInvoker) .with(Arrays.asList(listener)) .build(); } } Instrumentation The Servlet Listener listens to the servlet request, but not to the GraphQL query execution. If you want to listen to that you should use the Instrumentation provided by GraphQL Java.</description></item><item><title>OSGi</title><link>https://www.graphql-java-kickstart.com/servlet/osgi/</link><pubDate>Fri, 15 May 2020 09:28:02 +0100</pubDate><guid>https://www.graphql-java-kickstart.com/servlet/osgi/</guid><description>The OsgiGraphQLHttpServlet uses a &amp;ldquo;provider&amp;rdquo; model to supply the servlet with the required objects:
GraphQLQueryProvider: Provides query fields to the GraphQL schema. GraphQLMutationProvider: Provides mutation fields to the GraphQL schema. GraphQLTypesProvider: Provides type information to the GraphQL schema. ExecutionStrategyProvider: Provides an execution strategy for running each query. GraphQLContextBuilder: Builds a context for running each query. Examples You can now find some example on how to use graphql-java-servlet.
Requirements The OSGi examples use Maven as a build tool because it requires plugins that are not (yet) available for Gradle.</description></item></channel></rss>